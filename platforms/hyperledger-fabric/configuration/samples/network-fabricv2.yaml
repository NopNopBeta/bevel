##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################
---
install_arch: "amd64"
# yaml-language-server: $schema=../../../../platforms/network-schema.json
# This is a sample configuration file for setting up initial Fabric network with 1 RAFT Orderer and 2 Peers.
network:
  # Network level configuration specifies the attributes required for each organization
  # to join an existing network.
  type: fabric
  version: 2.5.4 # currently tested 2.2.2 and 2.5.4

  #Environment section for Kubernetes setup
  env:
    type: "e01" # tag for the environment. Important to run multiple flux on single cluster
    proxy: haproxy # values can be 'haproxy' or 'none'
    retry_count: 50 # Retry count for the checks
    external_dns: disabled # Should be enabled if using external-dns for automatic route configuration
    labels:
      service:
        example1: example2
      deployment: {}
      pvc: {}
  # For providing Custom Templates to generate configtx.yaml
  configtx:
    custom: false # true : when custom tpl(s) are to be provided | false : when the default tpl(s) are to be used
    folder_path: /absolute/path/to/folder # path to folder where the tpl(s) are placed e.g. /home/bevel/build/configtx_tpl/

  # Docker registry details where images are stored. This will be used to create k8s secrets
  # Please ensure all required images are built and stored in this registry.
  # Do not check-in docker_password.
  docker:
    url: "ghcr.io/hyperledger"
    # username: "docker_username"
    # password: "docker_password"

    # Remote connection information for orderer (will be blank or removed for orderer hosting organization)
    # For RAFT consensus, have odd number (2n+1) of orderers for consensus agreement to have a majority.
  consensus: raft
  orderers:
  - orderer:
    type: orderer
    name: orderer1
    org_name: org1-tf # org_name should match one organization definition below in organizations: key            
    uri: orderer1.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, Can be external or internal URI for orderer which should be reachable by all peers
  # The channels defined for a network with participating peers in each channel
  channels:
  - channel:
    consortium: tfConsortium
    channel_name: tfnet-ch1
    channel_status: new
    osn_creator_org:
      # Organization name, whose orderers will create the channel. This field is only used with version 2.5
      name: org1-tf
    chaincodes:
    - "datapoint-collection"
    orderers:
    - org1-tf
    participants:
    - organization:
      name: org1-tf
      type: creator # creator organization will create the channel and instantiate chaincode, in addition to joining the channel and install chaincode
      org_status: new
      peers:
      - peer:
        name: peer0
        type: anchor
        gossipAddress: peer0.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, External or internal URI of the gossip peer
        peerAddress: peer0.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, External URI of the peer
      - peer:
        name: peer1
        type: nonanchor
        gossipAddress: peer0.org1-tf-net.tfe01.loyal-fibre.com:443
        peerAddress: peer1.org1-tf-net.tfe01.loyal-fibre.com:443
      ordererAddress: orderer1.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, External or internal URI of the orderer
    endorsers:
    # Only one peer per org required for endorsement
    - organization:
      name: org1-tf
      corepeerAddress: peer0.org1-tf-net.tfe01.loyal-fibre.com:443
      certificate: "/home/bevel/build/org1-tf/server.crt" # certificate path for peer
  # Allows specification of one or many organizations that will be connecting to a network.
  # If an organization is also hosting the root of the network (e.g. doorman, membership service, etc),
  # then these services should be listed in this section as well.
  organizations:

  # Specification for the 1st organization. Each organization maps to a VPC and a separate k8s cluster
  - organization:
    name: org1-tf
    country: GB
    state: London
    location: London
    subject: "O=CGI,OU=CGI,L=London,C=GB"
    external_url_suffix: tfe01.loyal-fibre.com # Ignore for proxy none
    org_status: new
    orderer_org: org1-tf # Name of the organization that provides the ordering service
    fabric_console: disabled # To not deploy Fabric console for this organization
    ca_data:
      certificate: /home/bevel/build/org1-tf/server.crt

    cloud_provider: aws # Options: aws, azure, gcp, digitalocean, minikube
    aws:
      access_key: "aws_access_key" # AWS Access key, only used when cloud_provider=aws
      secret_key: "aws_secret_key" # AWS Secret key, only used when cloud_provider=aws

    # Kubernetes cluster deployment variables. The config file path and name has to be provided in case
    # the cluster has already been created.
    k8s:
      region: "eu-west-2"
      context: "arn:aws:eks:eu-west-2:AWS_ACCOUNT:cluster/CLUSTER_NAME"
      config_file: "/home/bevel/build/config-e01"

    # Hashicorp Vault server address and root-token. Vault should be unsealed.
    # Do not check-in root_token
    vault:
      url: "vault_addr"
      root_token: "vault_root_token"
      secret_path: "secretsv2"

    # Git Repo details which will be used by GitOps/Flux.
    # Do not check-in git_access_token
    gitops:
      git_protocol: "https" # Option for git over https or ssh
      git_url: "https://gitlab.loyal-fibre.com/tf1/tf-bevel.git" # Gitops https or ssh url for flux value files 
      branch: "e01" # Git branch where release is being made
      release_dir: "platforms/hyperledger-fabric/releases/dev" # Relative Path in the Git repo for flux sync per environment.
      component_dir: "platforms/hyperledger-fabric/releases/k8sComponent" # Relative path where values files are stored.
      chart_source: "platforms/hyperledger-fabric/charts" # Relative Path where the Helm charts are stored in Git repo
      git_repo: "gitlab.loyal-fibre.com/tf1/tf-bevel.git" # Gitops git repository URL for git push  (without https://)
      username: "git_username" # Git user who has rights to check-in in all branches
      password: "git_access_token" # Git Server user password/token (Optional for ssh; Required for https)
      email: "tf-deployer@cgi.com" # Email to use in git config
      private_key: "path_to_private_key" # Path to private key file which has write-access to the git repo (Optional for https; Required for ssh)
    # Generating User Certificates with custom attributes using Fabric CA in Bevel for Peer Organizations
    users:
    - user:
      identity: user1
      attributes:
      - key: "hf.Revoker"
        value: "true"
    services:
      # Define the CA services with correct COMMON NAME(CN)
      ca:
        name: ca
        subject: "/C=GB/ST=London/L=London/O=CGI/CN=ca.org1-tf-net.tfe01.loyal-fibre.com"
        type: ca
        grpc:
          port: 7054
      # Define the Bootstrap Orderers for the network, all other ADDED orderers will be followers only
      orderers:
      - orderer:
        name: orderer1
        type: orderer
        grpc:
          port: 7050
        metrics:
          enabled: false
          port: 9443
        ordererAddress: orderer1.org1-tf-net.tfe01.loyal-fibre.com:443
      # Define the bootstrap Peers for the Org
      peers:
      - peer:
        name: peer0
        type: anchor # This can be anchor/nonanchor. Atleast one peer should be anchor peer.    
        gossippeeraddress: peer0.org1-tf-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer
        peerAddress: peer0.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, External URI of the peer
        cli: enabled # Creates a peer cli pod depending upon the (enabled/disabled) tag.
        cactus_connector: disabled # set to enabled to create a cactus connector for Fabric
        grpc:
          port: 7051
        events:
          port: 7053
        couchdb:
          port: 5984
        chaincodes:
        - name: "datapoint-collection" # This has to be replaced with the name of the chaincode
          version: "1" # This has to be replaced with the version of the chaincode
          sequence: "1" # Sequence of the chaincode, update this only for chaincode reinstall for additional orgs/peers
          external_chaincode: true # True for external chaincode
          init_required: false # from your chaincode init is not needed
          tls: false # Your chaincode always runs in the same cluster, so TLS is false
          image: ghcr.io/hyperledger-bevel/asset-transfer-private-data:latest # Provide correct URL for your chaincode docker image
          arguments: "" #Arguments to be passed for invoke
          endorsements: "OR('org1-tfMSP.member')" #Endorsements (if any) provided along with the chaincode
          collections_config: "/home/bevel/platforms/hyperledger-fabric/configuration/collections/collections_config.json"
      - peer:
        name: peer1
        type: nonanchor # This can be anchor/nonanchor. Atleast one peer should be anchor peer.    
        gossippeeraddress: peer0.org1-tf-net:7051 # Internal Address of the other peer in same Org for gossip, same peer if there is only one peer
        peerAddress: peer1.org1-tf-net.tfe01.loyal-fibre.com:443 # Must include port, External URI of the peer
        cli: disabled # Creates a peer cli pod depending upon the (enabled/disabled) tag.
        cactus_connector: disabled # set to enabled to create a cactus connector for Fabric
        grpc:
          port: 7051
        events:
          port: 7053
        couchdb:
          port: 5984
        chaincodes:
        - name: "datapoint-collection" # This has to be replaced with the name of the chaincode
          version: "1" # This has to be replaced with the version of the chaincode
          sequence: "1" # Sequence of the chaincode, update this only for chaincode reinstall for additional orgs/peers
          external_chaincode: true # True for external chaincode
          init_required: false # from your chaincode init is not needed
          tls: false # Your chaincode always runs in the same cluster, so TLS is false
          image: ghcr.io/hyperledger-bevel/asset-transfer-private-data:latest # Provide correct URL for your chaincode docker image
          arguments: "" #Arguments to be passed for invoke
          endorsements: "OR('org1-tfMSP.member')" #Endorsements (if any) provided along with the chaincode
          collections_config: "/home/bevel/platforms/hyperledger-fabric/configuration/collections/collections_config.json"
