##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

global:
  # HLF Network Version
  #Eg. version: 2.5.4
  version: 2.5.4
  #Provide the service account name which will be created.
  serviceAccountName: vault-auth
  cluster:
    provider: aws  # choose from: minikube | aws | azure | gcp
    cloudNativeServices: false # only 'false' is implemented
  vault:
    #Provide the type of vault
    #Eg. type: hashicorp
    type: hashicorp
    #Provide the vaultrole for an organization
    #Eg. vaultrole: org1-vault-role
    role: vault-role
    #Provide the vault server address
    #Eg. vaultaddress: http://Vault-884963190.eu-west-1.elb.amazonaws.com
    address:
    #Provide the kubernetes auth backed configured in vault for an organization
    #Eg. authpath: manufacturer
    authPath: manufacturer
    #Provide the secret engine.
    secretEngine: secretsv2
    #Provide the vault path where the secrets will be stored
    secretPrefix: "data/manufacturer"
    #Kuberenetes secret for vault ca.cert
    #Enable or disable TLS for vault communication if value present or not
    #Eg. tls: vaultca
    tls: 

  proxy:
    #This will be the proxy/ingress provider. Can have values "none" or "haproxy"
    #Eg. provider: "haproxy"
    provider: "haproxy"
    #This field contains the external URL of the organization
    #Eg. externalUrlSuffix: test.blockchaincloudpoc.com
    externalUrlSuffix: test.blockchaincloudpoc.com
    #This field contains the external port on haproxy
    #Eg. port: 443
    port: 443

certs:
  # Flag indicating the re-creation of certificates.
  refreshCertValue: false
  orgData:
    caAddress: ca.manufacturer-net:7051
    caAdminUser: manufacturer-admin
    caAdminPassword: manufacturer-adminpw
    #Provide organization's name in lowercases
    #Eg. orgName: manufacturer 
    orgName: manufacturer
    #Provide organization's type (orderer or peer)
    #Eg. component_type: orderer
    type: peer
    #Provide organization's subject
    #Eg. "O=Orderer,L=51.50/-0.13/London,C=GB"
    componentSubject: "O=Orderer,L=51.50/-0.13/London,C=GB"

image:
  #Provide the valid image name and version for chaincode server
  #Eg. <DOCKER_USERNAME>/marbles:latest
  external_chaincode: ghcr.io/hyperledger/bevel-samples-example:1.0
  #Provide the valid image name and version to read certificates from vault server 
  #Eg. alpineUtils: ghcr.io/hyperledger/bevel-alpine:latest
  alpineutils: ghcr.io/hyperledger/bevel-alpine:latest
  catools: ghcr.io/hyperledger/bevel-fabric-ca:latest
  #Provide the secret to use if private repository
  #Eg. pullSecret: regcred
  pullSecret:

chaincode:
  # Chaincode name eg. marbles
  name: example
  # Chaincode version eg. 1
  version: 1
  # Chaincode ID generated after chaincode is installed eg. marbles:e45t6jtkwefweti34itjrefwe
  ccid: "xxx111"
  # Path in the chaincode server container where the crypto needs to be mounted eg. /crypto
  crypto_mount_path: "/secrets"
  # if tls is disabled or not | BOOLEAN | eg. true
  tls: true
  #Provide the serviceType for the chaincode
  #Eg. serviceType: NodePort
  serviceType: ClusterIP 
  loadBalancerType: ""
  port: 7052
  healthCheck: 
    retries: 20
    sleepTimeAfterError: 15

labels:
  service: []
  pvc: []
  deployment: []
