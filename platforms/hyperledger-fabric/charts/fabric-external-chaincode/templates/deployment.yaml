##############################################################################################
#  Copyright Accenture. All Rights Reserved.
#
#  SPDX-License-Identifier: Apache-2.0
##############################################################################################

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
  labels:
    name: {{ .Release.Name }}
    app.kubernetes.io/name: {{ .Release.Name }}
    app.kubernetes.io/component: fabric
    app.kubernetes.io/part-of: {{ template "fabric-external-chaincode.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
    {{- include "labels.deployment" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}
      app.kubernetes.io/name: {{ .Release.Name }}
      app.kubernetes.io/component: fabric
      app.kubernetes.io/part-of: {{ template "fabric-external-chaincode.fullname" . }}
      app.kubernetes.io/namespace: {{ .Release.Namespace }}
      app.kubernetes.io/release: {{ .Release.Name }}
      app.kubernetes.io/managed-by: helm
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        app.kubernetes.io/name: {{ .Release.Name }}
        app.kubernetes.io/component: fabric
        app.kubernetes.io/part-of: {{ template "fabric-external-chaincode.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
        {{- include "labels.deployment" . | nindent 8 }}
    spec:   
      serviceAccountName: {{ .Values.global.serviceAccountName }}
      {{- if .Values.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      {{- end }}
    {{ if .Values.chaincode.tls }}
      volumes:
      {{ if .Values.global.vault.tls  }}
      - name: vaultca
        secret:
          secretName: {{ .Values.global.vault.tls }}
          items:
          - key: ca.crt.pem
            path: ca-certificates.crt
      {{ end  }}
      - name: certificates
        emptyDir:
          medium: Memory
      - name: scripts-volume
        configMap:
          name: bevel-vault-script
      initContainers:
      - name: certificates-init
        image: {{ .Values.image.alpineutils }}
        imagePullPolicy: IfNotPresent
        env:
        - name: VAULT_ADDR
          value: {{ .Values.global.vault.address }}
        - name: VAULT_SECRET_ENGINE
          value: "{{ .Values.global.vault.secretEngine }}"
        - name: VAULT_SECRET_PREFIX
          value: "{{ .Values.global.vault.secretPrefix }}"
        - name: KUBERNETES_AUTH_PATH
          value: {{ .Values.global.vault.authPath }}
        - name: VAULT_APP_ROLE
          value: {{ .Values.global.vault.role }}
        - name: MOUNT_PATH
          value: /secret
        - name: CHAINCODE_TLS_ENABLED
          value: "{{ .Values.chaincode.tls }}"
        - name: VAULT_TYPE
          value: "{{ .Values.global.vault.type }}"
        command: ["sh", "-c"]
        args:
        - |-
          #!/usr/bin/env sh
{{- if eq .Values.global.vault.type "hashicorp" }}
          . /scripts/bevel-vault.sh

          vaultBevelFunc "init"
          function getChaincodeTlsSecret {
            KEY=$1-xxx
          
            echo "Getting chaincode certificates from Vault"
            vaultBevelFunc "readJson" "${VAULT_SECRET_ENGINE}/${VAULT_SECRET_PREFIX}/peers/${KEY}"
            if [ "$SECRETS_AVAILABLE" == "yes" ]
            then
              CACERT=$(echo ${VAULT_SECRET} | jq -r '.["ca.crt"]')
              CLIENT_CERT=$(echo ${VAULT_SECRET} | jq -r '.["client.crt"]')
              CLIENT_KEY=$(echo ${VAULT_SECRET} | jq -r '.["client.key"]')

              echo "${CACERT}" > ${MOUNT_PATH}/ca.crt
              echo "${CLIENT_CERT}" > ${MOUNT_PATH}/client.crt
              echo "${CLIENT_KEY}" > ${MOUNT_PATH}/client.key
              CC_TLS_SECRET=true
            else
              CC_TLS_SECRET=false
            fi
          }
{{- else }}
          function getChaincodeTlsSecret {
            KEY=$1-xxx
            KUBENETES_SECRET=$(kubectl get secret ${KEY} --namespace {{ .Release.Namespace }} -o json)
            if  [ "$KUBENETES_SECRET" = "" ]; then
              CC_TLS_SECRET=false
            else
              TLS_CA_CERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.cacrt'  | base64 -d)
              TLS_SERVER_CERT=$(echo ${KUBENETES_SECRET} | jq -r '.data.servercrt'  | base64 -d)
              TLS_SERVER_KEY=$(echo ${KUBENETES_SECRET} | jq -r '.data.serverkey'  | base64 -d)
              
              echo "${TLS_CA_CERT}" > ${MOUNT_PATH}/ca.crt
              echo "${TLS_SERVER_CERT}" > ${MOUNT_PATH}/server.crt
              echo "${TLS_SERVER_KEY}" > ${MOUNT_PATH}/server.key
              CC_TLS_SECRET=true
            fi
          }
{{- end }}
          COUNTER=1
          while [ "$COUNTER" -le {{ .Values.chaincode.healthCheck.retries }} ]
          do
            mkdir -p ${MOUNT_PATH}
            getChaincodeTlsSecret ${PEER_NAME}

            if [ "$CC_TLS_SECRET" = "true" ]
            then
              echo "Chaincode certificates have been obtained correctly"
              break
            else
              echo "Chaincode certificates have not been obtained, sleeping for {{ .Values.chaincode.healthCheck.sleepTimeAfterError }}"
              sleep {{ .Values.chaincode.healthCheck.sleepTimeAfterError }}
              COUNTER=`expr "$COUNTER" + 1`
            fi
          done

          if [ "$COUNTER" -gt {{ .Values.chaincode.healthCheck.retries }} ]
          then
            echo "Retry attempted `expr $COUNTER - 1` times, The peer certificates have not been obtained."
            exit 1
          fi
        volumeMounts:
        {{ if .Values.global.vault.tls  }}
        - name: vaultca
          mountPath: "/etc/ssl/certs/"
          readOnly: true
        {{ end }}
        - name: certificates
          mountPath: /secret
        - name: scripts-volume
          mountPath: /scripts/bevel-vault.sh
          subPath: bevel-vault.sh
    {{ end }}
      containers:
        - name: chaincode
          image: {{ .Values.image.external_chaincode }}
          imagePullPolicy: Always
          env:
            - name: CHAINCODE_ID
              value: "{{ .Values.chaincode.ccid }}"
            - name: CHAINCODE_SERVER_ADDRESS
              value: "0.0.0.0:7052"
            - name: CHAINCODE_TLS_DISABLED
              value: "{{ not .Values.chaincode.tls }}"
          {{ if .Values.chaincode.tls }}
            - name: CHAINCODE_TLS_KEY
              value: "{{ .Values.chaincode.crypto_mount_path }}/client.key"
            - name: CHAINCODE_TLS_CERT
              value: "{{ .Values.chaincode.crypto_mount_path }}/client.crt"
            - name: CHAINCODE_CLIENT_CA_CERT
              value: "{{ .Values.chaincode.crypto_mount_path }}/ca.crt"
          {{ end }}
          ports:
            - containerPort: 7052
          {{ if .Values.chaincode.tls }}
          volumeMounts:
          - name: certificates
            mountPath: {{ .Values.chaincode.crypto_mount_path }}
            readOnly: true
          {{ end }}
